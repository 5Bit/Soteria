//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;


/*
 * Basically a rip from the Unity example of a singleton inheriting
 * from a monobehaviour.
 * This script automatically attaches itself to an empty game object
 * if the singleton instance was null.
 */
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	private static T m_Instance;

	//initialize the mutex
	private static object m_Lock = new object();

	private static bool m_AppQuitting = false;

	//you can inherit from it but you can't instantiate this
	//class on its own
	protected Singleton()
	{
	}

	//accessible from inherited classes
	//call this to get your internal instance and call methods
	//on it

	protected static T Instance
	{
		get
		{
			//lock it
			lock(m_Lock)
			{
				//apparently Unity deletes objects in a random order
				//at application shut down..if this flag is set to true
				//that means the engine already called OnDestroy() on this singleton,
				//and will just return null.
				if(m_AppQuitting)
				{
					return null;
				}
				
				//fuck monodevelop doe
				if(m_Instance == null)
				{
					//see if object exists yet
					m_Instance = (T) FindObjectOfType(typeof(T));

					//something weird happened if there is more than one
					//of this object type alive..so find it
					if(FindObjectsOfType(typeof(T)).Length > 1)
					{
						//handle..
						return m_Instance;
					}


					else if(m_Instance == null)
					{
						//create our empty gameobject container and connect
						//our singleton script to it
						GameObject gObj = new GameObject();
						m_Instance = (T) gObj.AddComponent<T>();

						//give a name so it sticks out
						gObj.name = "<Singleton> " + typeof(T).ToString();

						//this tells Unity not to blow up this singleton on 
						//a scene switch, singletons inheriting from this class
						//last for the lifetime of the application
						DontDestroyOnLoad(gObj);
					}

					else
					{
						//handle..
					}
				}
				return m_Instance;
			}
		}
	}

	//do any cleanup you want in this method
	protected virtual void VOnDestroy()
	{
	}

	public void OnDestroy()
	{
		VOnDestroy();
		m_AppQuitting = true;
	}
}

