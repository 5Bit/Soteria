using UnityEngine;
using System.Collections;

public class GameDirector : MonoBehaviour {
<<<<<<< HEAD
	
	private static GameDirector _instance;
	private GameObject _player;
	
#region Managers

	private AudioManager     	_audioManager;
	private InputManager     	_inputManager;
	private TimerManager 		_timerManager;
	private HUDManager       	_HUDManager;
	private EncounterManager 	_encounterManager;
	private StateManager     	_stateManager;

#endregion
	
	public static GameDirector instance
	{
		get {
			if (_instance == null)
				_instance = GameObject.FindObjectOfType<GameDirector>();
			return (GameDirector)(_instance);
		}
	}

	public GameObject getPlayer()
	{
		return _player;
	}
=======

    protected static GameDirector _instance;
    private GameObject _player = null;
>>>>>>> origin/test

    #region Managers

    private AudioManager _audioManager;
    private InputManager _inputManager;
    private HUDManager _HUDManager;
    private EncounterManager _encounterManager;
    private StateManager _stateManager;

    #endregion

    public static GameDirector instance
    {
        get
        {
            if (_instance == null)
                _instance = GameObject.FindObjectOfType<GameDirector>();
            return (GameDirector)(_instance);
        }
    }

    public GameObject GetPlayer()
    {
		if (_player == null) 
		{
			_player = GameObject.FindWithTag("Player");
			_player.GetComponent<EncounterMovementController>().Initialize(_stateManager);
		}
        return _player;
    }

<<<<<<< HEAD
	}
	private void InitializeManagers()
	{
		///Find Player:
		this._player = GameObject.Find("Player");
		// This is problematic (AddComponent)-> it forces the script to be a component and uses the 
		// Update function automatically each frame, only solution not use MonoBehavior <-- not so simple
		//-----
		// solved this by setting enable to false in the awake function (this will stop  the start fuction from getting called)
		// setting update to public and calling update manually from the game director. Updates should be left to a minimum we'll
		// start using events soon.

		this._timerManager = this.gameObject.GetComponent<TimerManager>();
		this._audioManager = this.gameObject.AddComponent<AudioManager>();
		this._inputManager = this.gameObject.AddComponent<InputManager>();
		this._HUDManager = this.gameObject.AddComponent<HUDManager> ();
		this._encounterManager = this.gameObject.AddComponent<EncounterManager> ();
		this._stateManager = this.gameObject.AddComponent<StateManager>();

		this._timerManager.Initialize(); //->quick hack, needs to change later.
		this._audioManager.Initialize();
		this._inputManager.Initialize();
		this._HUDManager.Initialize();
		this._encounterManager.Initialize();
		this._stateManager.Initialize();
	}
#region InputManager Methods

	public int GetQTECount()
	{
		return this._inputManager.getPressCount ();
	}

#endregion

#region EncounterManager Methods
	/// <summary>
	/// add these in the encounter manager later on!
	/// After this build we'll have to start using events base on
	/// the what's happening in the game.
	/// </summary>
	/// 
=======
    // Use this for initialization
    private void Awake()
    {
        if (_instance == null)
        {
            _instance = this;
            this.InitializeManagers();
			this.GetPlayer();
            DontDestroyOnLoad(this); //Keep the instance going between scenes
        }
        else
        {
            if (this != _instance)
                Destroy(this.gameObject);
        }
    }

    // Update is called once per frame
    private void Update()
    {

    }
    private void InitializeManagers()
    {
        //This is problematic (AddComponent)-> it forces the script to be a component and uses the 
        // Update function automatically each frame, only solution not use MonoBehavior <-- not so simple

        _stateManager = this.gameObject.AddComponent<StateManager>();
        _stateManager.Initialize();
        _audioManager = this.gameObject.AddComponent<AudioManager>();
        _audioManager.Initialize();
        //_inputManager = this.gameObject.AddComponent<InputManager>();
        //_inputManager.Initialize();
        _HUDManager = this.gameObject.AddComponent<HUDManager>();
        _HUDManager.Initialize();
        _encounterManager = this.gameObject.AddComponent<EncounterManager>();
        _encounterManager.Initialize();
        
    }

    #region EncounterManager

    public void StopEncounterMode()
    {
        _stateManager.ChangeGameState(GameStates.Normal);
        _HUDManager.EnableNormalView();
		_player.GetComponent<EncounterMovementController> ().OverCome ();
		_encounterManager.KillSafetyLight();
        //this.gameObject.AddComponent<LevelManager>().SetActiveLevel("TestSceneWithArt");
    }
>>>>>>> origin/test


    public void StartEncounterMode(bool lightCooldown)
    {
		if (_stateManager.GameState() != GameStates.Encounter) 
		{
			_stateManager.ChangeGameState (GameStates.Encounter);
		}
		if (!lightCooldown)
		{
			_HUDManager.EnableEncounterView();
		}
	}
<<<<<<< HEAD
	
	/// <summary>
	/// Do we want to stop the ecounter with the safety light or just
	/// Change the sate so that the player is in "escape" mode or
	/// something like that. We'll discuss this later on.
	/// </summary>
	public void TakeSafteyLight()
=======

    public void TakeSafteyLight()
    {
        //StopEncounterMode();
		_stateManager.ChangeGameState (GameStates.InLight);
        //Debug.Log("Switching from encounter to safety light mode");
		_encounterManager.InitializeSafetyLight();
    }

	public void LightReset()
>>>>>>> origin/test
	{
		if (_stateManager.GameState () == GameStates.Encounter)
		{
			_HUDManager.EnableEncounterView();
		}
	}
<<<<<<< HEAD
#endregion

#region AudioManager Methods
	public void PlayAudioClip(AudioID inAID)
	{
		this._audioManager.PlayAudio(inAID);
	}
	/// <summary>
	/// Adds the audio clip Programmatically.
	/// </summary>
	public void AddAudioClip(string inClipName, AudioID inAID, GameObject inGameObj = null)
	{
		this._audioManager.AddAudioSource (inClipName, inAID, inGameObj);
	}

	/// <summary>
	/// Attachs the audio source that was added to another object from the inspector 
	/// so that the manager can control it.
	/// </summary>
	public void AttachAudioSource( AudioSource inAudioSrc,GameObject inGameObj, string inName)
	{
		this._audioManager.AttachAudioSource (inAudioSrc,inGameObj,inName);
	}
	///Other Stuff to Add.
	/// --->
		//set Parameters Methods
		//Remove Audio Clip
		//Silence Audio Clip
		//Clone Audio Clip
		//Is Done playing Clip
		//Queue Clips

#endregion
=======

    #endregion
>>>>>>> origin/test
}

